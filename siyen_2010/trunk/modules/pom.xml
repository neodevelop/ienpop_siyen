<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>siyen</artifactId>
		<groupId>edu.ienpop</groupId>
		<version>1.0-SNAPSHOT</version>
	</parent>
	<artifactId>modules</artifactId>
	<packaging>pom</packaging>
	<name>Modulos Java del SIYEN</name>
	<modules>
		<module>siyen-api</module>
		<module>siyen-core</module>
		<module>siyen-web</module>
	</modules>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.testng</groupId>
				<artifactId>testng</artifactId>
				<version>5.11</version>
				<classifier>jdk15</classifier>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.7</version>
				<scope>test</scope>
			</dependency>
			<!-- Dependencia del nucleo del modelo e interfaces sel SIYEN -->
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>siyen-api</artifactId>
				<version>${project.version}</version>
			</dependency>
			<!-- Dependencia de la implementación base del SIYEN -->
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>siyen-core</artifactId>
				<version>${project.version}</version>
			</dependency>
			<!--
				Core utilities used by other modules. Define this if you use Spring
				Utility APIs (org.springframework.core.*/org.springframework.util.*)
			-->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>

			<!--
				Expression Language (depends on spring-core) Define this if you use
				Spring Expression APIs (org.springframework.expression.*)
			-->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-expression</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>

			<!--
				Bean Factory and JavaBeans utilities (depends on spring-core) Define
				this if you use Spring Bean APIs (org.springframework.beans.*)
			-->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>

			<!--
				Aspect Oriented Programming (AOP) Framework (depends on spring-core,
				spring-beans) Define this if you use Spring AOP APIs
				(org.springframework.aop.*)
			-->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aop</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>

			<!--
				Application Context (depends on spring-core, spring-expression,
				spring-aop, spring-beans) This is the central artifact for Spring's
				Dependency Injection Container and is generally always defined
			-->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>

			<!--
				Various Application Context utilities, including EhCache, JavaMail,
				Quartz, and Freemarker integration Define this if you need any of
				these integrations
			-->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>

			<!--
				Transaction Management Abstraction (depends on spring-core,
				spring-beans, spring-aop, spring-context) Define this if you use
				Spring Transactions or DAO Exception Hierarchy
				(org.springframework.transaction.*/org.springframework.dao.*)
			-->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-tx</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>

			<!--
				JDBC Data Access Library (depends on spring-core, spring-beans,
				spring-context, spring-tx) Define this if you use Spring's
				JdbcTemplate API (org.springframework.jdbc.*)
			-->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jdbc</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>

			<!--
				Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA,
				and iBatis. (depends on spring-core, spring-beans, spring-context,
				spring-tx) Define this if you need ORM (org.springframework.orm.*)
			-->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-orm</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>

			<!--
				Object-to-XML Mapping (OXM) abstraction and integration with JAXB,
				JiBX, Castor, XStream, and XML Beans. (depends on spring-core,
				spring-beans, spring-context) Define this if you need OXM
				(org.springframework.oxm.*)
			-->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-oxm</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>

			<!--
				Web application development utilities applicable to both Servlet and
				Portlet Environments (depends on spring-core, spring-beans,
				spring-context) Define this if you use Spring MVC, or wish to use
				Struts, JSF, or another web framework with Spring
				(org.springframework.web.*)
			-->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-web</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>

			<!--
				Spring MVC for Servlet Environments (depends on spring-core,
				spring-beans, spring-context, spring-web) Define this if you use
				Spring MVC with a Servlet Container such as Apache Tomcat
				(org.springframework.web.servlet.*)
			-->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>
				<version>${org.springframework.version}</version>
			</dependency>

			<!--
				Support for testing Spring applications with tools such as JUnit and
				TestNG This artifact is generally always defined with a 'test' scope
				for the integration testing framework and unit testing stubs
			-->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-test</artifactId>
				<version>${org.springframework.version}</version>
				<scope>test</scope>
			</dependency>
			<!--
				Hibernate is a powerful, high performance object/relational
				persistence and query service
			-->
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate</artifactId>
				<version>${org.hibernate.version}</version>
			</dependency>
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-annotations</artifactId>
				<version>${org.hibernate.annotations.version}</version>
			</dependency>
			<!--
				The Java Persistence API provides a POJO persistence model for
				object-relational mapping. The Java Persistence API was developed by
				the EJB 3.0 software expert group as part of JSR 220, but its use is
				not limited to EJB software components. It can also be used directly
				by web applications and application clients, and even outside the
				Java EE platform, for example, in Java SE applications.
			-->
			<dependency>
				<groupId>javax.persistence</groupId>
				<artifactId>persistence-api</artifactId>
				<version>1.0</version>
			</dependency>
			<!--
				The commons-dbcp package relies on code in the commons-pool package
				to provide the underlying object pool mechanisms that it utilizes.
			-->
			<dependency>
				<groupId>commons-dbcp</groupId>
				<artifactId>commons-dbcp</artifactId>
				<version>1.4</version>
			</dependency>
			<!--
				MySQL es un sistema de gestión de base de datos relacional,
				multihilo y multiusuario
			-->
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
				<version>5.1.12</version>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-simple</artifactId>
				<version>1.5.2</version>
			</dependency>
			<dependency>
				<groupId>cglib</groupId>
				<artifactId>cglib-nodep</artifactId>
				<version>2.2</version>
			</dependency>
			<dependency>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
				<version>1.1.1</version>
			</dependency>
			<dependency>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				<version>1.2.15</version>
			</dependency>
			<dependency>
				<groupId>commons-lang</groupId>
				<artifactId>commons-lang</artifactId>
				<version>2.5</version>
			</dependency>
			<dependency>
				<groupId>aspectj</groupId>
				<artifactId>aspectjweaver</artifactId>
				<version>1.5.4</version>
			</dependency>
			<dependency>
				<groupId>commons-collections</groupId>
				<artifactId>commons-collections</artifactId>
				<version>3.2.1</version>
			</dependency>
			<dependency>
				<groupId>javassist</groupId>
				<artifactId>javassist</artifactId>
				<version>3.8.0.GA</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<properties>
		<org.springframework.version>3.0.1.RELEASE
		</org.springframework.version>
		<org.hibernate.version>3.2.7.ga</org.hibernate.version>
		<org.hibernate.annotations.version>3.4.0.GA
		</org.hibernate.annotations.version>
	</properties>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<aggregate>true</aggregate>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>2.1</version>
				<configuration>
					<aggregate>true</aggregate>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<configuration>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
				</configuration>
			</plugin>
		</plugins>
	</reporting>
</project>